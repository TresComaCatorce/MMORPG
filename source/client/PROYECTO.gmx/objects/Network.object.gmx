<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Inicio de la conexion

//Instanciacion de variables
savedbuffer = buffer_create( 1, buffer_grow, 1 );
reading = 0;
cutbuffer = buffer_create( 1, buffer_grow, 1 );

//Inicializacion del socket
socket = network_create_socket( network_socket_tcp );
network_connect_raw( socket, "127.0.0.1", 8083 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(async_load[? "type"])
{
    //Network event que se dispara con una entrada de datos.
    case network_type_data:
        buffer_copy( async_load[? "buffer"] , 0 , async_load[? "size"] , savedbuffer , buffer_tell(savedbuffer) );
        buffer_seek( savedbuffer , buffer_seek_relative , async_load[? "size"] + 1 );
        
        while(true)
        {
            var size = buffer_peek( savedbuffer , reading , buffer_u8 );
            
            if( buffer_get_size(savedbuffer) &gt;= reading + size )
            {
                buffer_copy( savedbuffer , reading , size , cutbuffer, 0 );
                buffer_seek( cutbuffer , 0 , 1 );
                
                handle_packet( cutbuffer );
                
                if( buffer_get_size(savedbuffer) != reading+size )
                {
                    reading += size;
                }
                else
                {
                    buffer_resize( savedbuffer , 1 );
                    reading = 0;
                    break;
                }
            }
            else
            {
                break;
            }
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
